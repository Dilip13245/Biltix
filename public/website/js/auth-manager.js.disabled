// Bulletproof Auth Manager
class AuthManager {
    static login(userData, rememberMe = false) {
        // Clear any existing auth data
        this.clearAuth();
        
        const authData = {
            user: userData,
            token: userData.token,
            user_id: userData.id,
            timestamp: Date.now(),
            remember_me: rememberMe
        };
        
        if (rememberMe) {
            localStorage.setItem('biltix_auth', JSON.stringify(authData));
        } else {
            sessionStorage.setItem('biltix_auth', JSON.stringify(authData));
        }
        
        // Redirect to dashboard immediately
        window.location.href = '/dashboard';
    }
    
    static logout() {
        this.clearAuth();
        window.location.href = '/login';
    }
    
    static clearAuth() {
        sessionStorage.removeItem('biltix_auth');
        localStorage.removeItem('biltix_auth');
    }
    
    static getAuthData() {
        // Check sessionStorage first (current session)
        const sessionAuth = sessionStorage.getItem('biltix_auth');
        if (sessionAuth) {
            try {
                return JSON.parse(sessionAuth);
            } catch (e) {
                sessionStorage.removeItem('biltix_auth');
            }
        }
        
        // Check localStorage (remember me)
        const localAuth = localStorage.getItem('biltix_auth');
        if (localAuth) {
            try {
                const authData = JSON.parse(localAuth);
                
                // Check if remember me expired (30 days)
                const now = Date.now();
                const thirtyDays = 30 * 24 * 60 * 60 * 1000;
                
                if (now - authData.timestamp > thirtyDays) {
                    localStorage.removeItem('biltix_auth');
                    return null;
                }
                
                return authData;
            } catch (e) {
                localStorage.removeItem('biltix_auth');
            }
        }
        
        return null;
    }
    
    static isLoggedIn() {
        const authData = this.getAuthData();
        return !!(authData && authData.token && authData.user_id);
    }
    
    static getToken() {
        const authData = this.getAuthData();
        return authData ? authData.token : null;
    }
    
    static getCurrentUser() {
        const authData = this.getAuthData();
        return authData ? authData.user : null;
    }
    
    // Protected page check (for dashboard, profile, etc)
    static requireAuth() {
        if (!this.isLoggedIn()) {
            window.location.href = '/login';
            return false;
        }
        return true;
    }
    
    // Public page check (for login, register)
    static redirectIfLoggedIn() {
        if (this.isLoggedIn()) {
            window.location.replace('/dashboard');
            return false;
        }
        return true;
    }
}

window.AuthManager = AuthManager;